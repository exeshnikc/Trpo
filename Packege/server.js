const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = 'polyclinic-secret-key-2025';

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./polyclinic.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initializeDatabase() {
  return new Promise((resolve, reject) => {
    db.serialize(() => {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        phone TEXT,
        password TEXT NOT NULL,
        role TEXT DEFAULT 'patient',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`);

      // –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
      db.run(`CREATE TABLE IF NOT EXISTS news (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        title TEXT NOT NULL,
        short_description TEXT,
        full_description TEXT,
        image_url TEXT,
        category TEXT DEFAULT 'general',
        is_active BOOLEAN DEFAULT 1,
        display_order INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã news:', err);
          reject(err);
          return;
        }
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ news —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        db.run('DELETE FROM news', (err) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã news:', err);
            reject(err);
            return;
          }
          console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã');
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
          const newsItems = [
            ['01 –æ–∫—Ç—è–±—Ä—è 2025', '–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', '–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞.', '–í –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ –æ—Ç–∫—Ä—ã–ª—Å—è –Ω–æ–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏, –æ—Å–Ω–∞—â–µ–Ω–Ω—ã–π —Å–∞–º—ã–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ª–µ—á–µ–Ω–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.', 'cardio.jpg', 'equipment', 1],
            ['05 –æ–∫—Ç—è–±—Ä—è 2025', '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ –≥—Ä–∏–ø–ø–∞', '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ –≥—Ä–∏–ø–ø–∞.', '–° 5 –æ–∫—Ç—è–±—Ä—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–∑–æ–Ω–Ω–∞—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ –≥—Ä–∏–ø–ø–∞. –ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏.', 'vaccine.jpg', 'vaccination', 2],
            ['07 –æ–∫—Ç—è–±—Ä—è 2025', '–ò–∑–º–µ–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤', '–ò–∑–º–µ–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤.', '–í–Ω–∏–º–∞–Ω–∏–µ! –° 7 –æ–∫—Ç—è–±—Ä—è –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤. –£—Ç–æ—á–Ω—è–π—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'schedule.jpg', 'schedule', 3],
            ['10 –æ–∫—Ç—è–±—Ä—è 2025', '–ü—Ä–∏—ë–º –Ω–æ–≤–æ–≥–æ —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞', '–ü—Ä–∏—ë–º –Ω–æ–≤–æ–≥–æ —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞.', '–í –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥. –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –æ—Ç–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É.', 'endocrinologist.jpg', 'doctors', 4],
            ['15 –æ–∫—Ç—è–±—Ä—è 2025', '–ù–µ–¥–µ–ª—è –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', '–ù–µ–¥–µ–ª—è –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.', '–° 15 –ø–æ 22 –æ–∫—Ç—è–±—Ä—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–µ–¥–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å —Å–∞—Ö–∞—Ä–Ω—ã–º –¥–∏–∞–±–µ—Ç–æ–º.', 'diabetes.jpg', 'events', 5]
          ];

          const stmt = db.prepare(`INSERT INTO news (date, title, short_description, full_description, image_url, category, display_order) 
                                  VALUES (?, ?, ?, ?, ?, ?, ?)`);
          
          let insertedCount = 0;
          newsItems.forEach((news, index) => {
            stmt.run(news, (err) => {
              if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', err);
              } else {
                insertedCount++;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: ${news[1]}`);
              }
              
              // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
              if (index === newsItems.length - 1) {
                setTimeout(() => {
                  stmt.finalize();
                  console.log(`‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (${insertedCount}/${newsItems.length})`);
                  resolve();
                }, 100);
              }
            });
          });
        });
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hashedPassword = bcrypt.hashSync('password123', 10);
      db.run(`INSERT OR IGNORE INTO users (first_name, last_name, email, phone, password) 
              VALUES (?, ?, ?, ?, ?)`, 
              ['–ê–º–∞', '–°—ã—á–æ–≤–∞', 'amasyhova23@yandex.by', '445122279', hashedPassword],
              (err) => {
                if (err) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                } else {
                  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω');
                }
              });
    });
  });
}

// ==================== API –†–û–£–¢–´ –î–õ–Ø –ù–û–í–û–°–¢–ï–ô ====================

// 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤
app.get('/api/news', (req, res) => {
  const { limit = 5 } = req.query;
  
  const query = `
    SELECT id, date, title, short_description, image_url, category
    FROM news 
    WHERE is_active = 1 
    ORDER BY display_order ASC, date DESC 
    LIMIT ?
  `;

  console.log('üì• –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î');

  db.all(query, [parseInt(limit)], (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
      return res.status(500).json({ 
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' 
      });
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î`);
    
    res.json({
      success: true,
      news: rows,
      total: rows.length
    });
  });
});

// 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID
app.get('/api/news/:id', (req, res) => {
  const { id } = req.params;
  
  db.get('SELECT * FROM news WHERE id = ? AND is_active = 1', [id], (err, row) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
      return res.status(500).json({ 
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏' 
      });
    }
    
    if (!row) {
      return res.status(404).json({ 
        success: false,
        error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
    
    res.json({
      success: true,
      news: row
    });
  });
});

// 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
app.post('/api/news', (req, res) => {
  const { date, title, short_description, full_description, image_url, category } = req.body;

  if (!date || !title) {
    return res.status(400).json({ 
      success: false,
      error: '–î–∞—Ç–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
    });
  }

  db.run(
    `INSERT INTO news (date, title, short_description, full_description, image_url, category) 
     VALUES (?, ?, ?, ?, ?, ?)`,
    [date, title, short_description, full_description, image_url, category],
    function(err) {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
        return res.status(500).json({ 
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏' 
        });
      }
      
      res.json({
        success: true,
        message: '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
        newsId: this.lastID
      });
    }
  );
});

// 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
app.get('/api/news-count', (req, res) => {
  db.get('SELECT COUNT(*) as count FROM news WHERE is_active = 1', (err, row) => {
    if (err) {
      return res.status(500).json({ 
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π' 
      });
    }
    
    res.json({
      success: true,
      count: row.count
    });
  });
});

// 5. –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
app.get('/api/debug/news', (req, res) => {
  db.all('SELECT * FROM news ORDER BY display_order ASC', (err, rows) => {
    if (err) {
      return res.status(500).json({ 
        success: false,
        error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + err.message 
      });
    }
    res.json({
      success: true,
      total: rows.length,
      news: rows
    });
  });
});

// 6. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–≤–æ—Å—Ç–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.post('/api/reset-news', (req, res) => {
  db.run('DROP TABLE IF EXISTS news', (err) => {
    if (err) {
      return res.status(500).json({ 
        success: false,
        error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ' + err.message 
      });
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ news —É–¥–∞–ª–µ–Ω–∞');
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    initializeDatabase()
      .then(() => {
        res.json({
          success: true,
          message: '–¢–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞'
        });
      })
      .catch(error => {
        res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ' + error.message
        });
      });
  });
});

// ==================== –û–°–¢–ê–õ–¨–ù–´–ï API –†–û–£–¢–´ ====================

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', async (req, res) => {
  try {
    const { first_name, last_name, email, phone, password } = req.body;

    if (!first_name || !last_name || !email || !password) {
      return res.status(400).json({ error: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    db.get('SELECT id FROM users WHERE email = ?', [email], async (err, row) => {
      if (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
      }
      if (row) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      db.run(
        'INSERT INTO users (first_name, last_name, email, phone, password) VALUES (?, ?, ?, ?, ?)',
        [first_name, last_name, email, phone, hashedPassword],
        function(err) {
          if (err) {
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
          }

          const token = jwt.sign(
            { userId: this.lastID, email: email },
            JWT_SECRET,
            { expiresIn: '24h' }
          );

          res.json({
            success: true,
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            token: token,
            user: {
              id: this.lastID,
              first_name: first_name,
              last_name: last_name,
              email: email
            }
          });
        }
      );
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/login', (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  db.get('SELECT * FROM users WHERE email = ?', [email], async (err, user) => {
    if (err) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
    if (!user) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign(
      { userId: user.id, email: user.email },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    res.json({
      success: true,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      token: token,
      user: {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        email: user.email,
        role: user.role
      }
    });
  });
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π HTML —Ñ–∞–π–ª
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
initializeDatabase()
  .then(() => {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
      console.log(`üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î: http://localhost:${PORT}/api/news`);
      console.log(`üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: http://localhost:${PORT}/api/debug/news`);
      console.log(`üîÑ –°–±—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π: http://localhost:${PORT}/api/reset-news`);
      console.log('üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ 5 –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ');
    });
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  });
const { Pool } = require('pg');

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'polyclinic',
  password: '123456', // –ï–°–õ–ò –ù–ï–¢ –ü–ê–†–û–õ–Ø - –°–î–ï–õ–ê–ô password: ''
  port: 5432,
});

async function testConnection() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const result = await pool.query('SELECT NOW() as current_time');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
    console.log('   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–î:', result.rows[0].current_time);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å
    const tables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    
    console.log('üìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ:');
    if (tables.rows.length === 0) {
      console.log('   ‚ùå –¢–∞–±–ª–∏—Ü –Ω–µ—Ç');
    } else {
      tables.rows.forEach(row => {
        console.log('   ‚úÖ', row.table_name);
      });
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    console.log('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    
    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –æ—à–∏–±–∫–∞–º
    if (error.message.includes('password authentication failed')) {
      console.log('   üí° –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–æ–ª—å –≤ —Ñ–∞–π–ª–µ test-db.js');
    } else if (error.message.includes('database "polyclinic" does not exist')) {
      console.log('   üí° –ë–∞–∑–∞ "polyclinic" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –°–æ–∑–¥–∞–π –µ—ë: createdb polyclinic');
    } else if (error.message.includes('connection refused')) {
      console.log('   üí° PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏: brew services start postgresql');
    }
  } finally {
    await pool.end();
    console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
testConnection();